name: .NET CI

env:
  REGISTRY_NAME: buweftwhs46jympnpreg.azurecr.io
  IMAGE_NAME: techexcel/dotnetcoreapp

on:
  push:
    branches: [main]
    paths: src/Application/**
  pull_request:
    branches: [main]
    paths: src/Application/**
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build Code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ./src/Application/src/RazorPagesTestSample/RazorPagesTestSample.csproj

      - name: Build
        run: dotnet build --no-restore ./src/Application/src/RazorPagesTestSample/RazorPagesTestSample.csproj

      - name: Test
        run: dotnet test --no-build --verbosity normal ./src/Application/tests/RazorPagesTestSample.Tests/RazorPagesTestSample.Tests.csproj

  dockerBuildPush:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image: ${{ steps.docker-meta.outputs.tags[0] }}

    steps:
      - uses: actions/checkout@v4

      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure Container Registry Login
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,priority=1000
            type=ref,event=branch,priority=900

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ./src/Application/src/RazorPagesTestSample
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

  deploy-to-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: dockerBuildPush
    outputs:
      image: ${{ needs.dockerBuildPush.outputs.image }}
    environment:
      name: dev
      url: ${{ steps.get-app-service-url.outputs.app_service_url }}
    steps:
      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.APP_SERVICE_NAME }}
          images: ${{ needs.dockerBuildPush.outputs.image }}
          slot-name: dev
      - name: Get App Service URL
        id: get-app-service-url
        run: |
          app_url=$(az webapp show --name ${{ vars.APP_SERVICE_NAME }} --resource-group ${{ secrets.AZURE_RG }} --slot ${{ vars.APP_SERVICE_SLOT_NAME }} --query defaultHostName -o tsv)
          echo "app_service_url=https://${app_url}" >> $GITHUB_OUTPUT

  deploy-to-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    environment:
      name: prod
      url: ${{ steps.get-app-service-url.outputs.app_service_url }}
    steps:
      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.APP_SERVICE_NAME }}
          images: ${{  needs.deploy-to-dev.outputs.image }}
          slot-name: ${{ vars.APP_SERVICE_SLOT_NAME }}
      - name: Get App Service URL
        id: get-app-service-url
        run: |
          app_url=$(az webapp show --name ${{ vars.APP_SERVICE_NAME }} --resource-group ${{ secrets.AZURE_RG }} --slot ${{ vars.APP_SERVICE_SLOT_NAME }} --query defaultHostName -o tsv)
          echo "app_service_url=https://${app_url}" >> $GITHUB_OUTPUT
